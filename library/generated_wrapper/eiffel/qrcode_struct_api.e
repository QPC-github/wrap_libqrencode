note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class QRCODE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	width: INTEGER
			-- Access member `width`
		require
			exists: exists
		do
			Result := c_width (item)
		ensure
			result_correct: Result = c_width (item)
		end

	set_width (a_value: INTEGER) 
			-- Change the value of member `width` to `a_value`.
		require
			exists: exists
		do
			set_c_width (item, a_value)
		ensure
			width_set: a_value = width
		end

	data:  detachable C_STRING
			-- Access member `data`
		require
			exists: exists
		do
			if attached c_data (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_data (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_data (a_value: C_STRING) 
			-- Change the value of member `data` to `a_value`.
		require
			exists: exists
		do
			set_c_data (item, a_value.item )
		end

feature {NONE} -- Implementation wrapper for struct QRcode

	sizeof_external: INTEGER 
		external
			"C inline use <qrencode.h>"
		alias
			"sizeof(QRcode)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <qrencode.h>"
		alias
			"[
				((QRcode*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <qrencode.h>"
		alias
			"[
				((QRcode*)$an_item)->version =  (int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_width (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <qrencode.h>"
		alias
			"[
				((QRcode*)$an_item)->width
			]"
		end

	set_c_width (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <qrencode.h>"
		alias
			"[
				((QRcode*)$an_item)->width =  (int)$a_value
			]"
		ensure
			width_set: a_value = c_width (an_item)
		end

	c_data (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <qrencode.h>"
		alias
			"[
				((QRcode*)$an_item)->data
			]"
		end

	set_c_data (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <qrencode.h>"
		alias
			"[
				((QRcode*)$an_item)->data =  (unsigned char*)$a_value
			]"
		ensure
			data_set: a_value = c_data (an_item)
		end

end
